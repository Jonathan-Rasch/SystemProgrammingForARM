


ARM Macro Assembler    Page 1 


    1 00000000                 PRESERVE8
    2 00000000                 AREA             OS_func, CODE, READONLY
    3 00000000         
    4 00000000         ; Export function locations
    5 00000000                 EXPORT           SVC_Handler
    6 00000000                 EXPORT           PendSV_Handler
    7 00000000                 EXPORT           _task_switch
    8 00000000                 EXPORT           _task_init_switch
    9 00000000         
   10 00000000         ; Import global variables
   11 00000000                 IMPORT           _currentTCB
   12 00000000                 IMPORT           _OS_scheduler
   13 00000000         
   14 00000000         ; Import SVC routines
   15 00000000                 IMPORT           _svc_OS_enable_systick
   16 00000000                 IMPORT           _svc_OS_addTask
   17 00000000                 IMPORT           _svc_OS_task_exit
   18 00000000                 IMPORT           _svc_OS_yield
   19 00000000                 IMPORT           _svc_OS_schedule
   20 00000000         
   21 00000000         SVC_Handler
   22 00000000         ; Link register contains special 'exit handler mode' cod
                       e
   23 00000000         ; Bit 2 tells whether the MSP or PSP was in use
   24 00000000 F01E 0F04       TST              lr, #4
   25 00000004 BF0C F3EF 
              8008             MRSEQ            r0, MSP
   26 0000000A F3EF 8009       MRSNE            r0, PSP
   27 0000000E         ; r0 now contains the SP that was in use
   28 0000000E         ; Return address is on the stack: load it into r1
   29 0000000E 6981            LDR              r1, [r0, #24]
   30 00000010         ; Use the return address to find the SVC instruction
   31 00000010         ; SVC instruction contains an 8-bit code
   32 00000010 F811 1C02       LDRB             r1, [r1, #-2]
   33 00000014         ; Check if it's in the table
   34 00000014 2905            CMP              r1, #((SVC_tableEnd - SVC_table
Start)/4)
   35 00000016         ; If not, return
   36 00000016 BFA8 4770       BXGE             lr
   37 0000001A         ; Branch to the right handler
   38 0000001A         ; Remember, the SP is in r0
   39 0000001A 4A19            LDR              r2, =SVC_tableStart
   40 0000001C F852 F021       LDR              pc, [r2, r1, lsl #2]
   41 00000020         
   42 00000020                 ALIGN
   43 00000020         SVC_tableStart
   44 00000020 00000000        DCD              _svc_OS_enable_systick
   45 00000024 00000000        DCD              _svc_OS_addTask
   46 00000028 00000000        DCD              _svc_OS_task_exit
   47 0000002C 00000000        DCD              _svc_OS_yield
   48 00000030 00000000        DCD              _svc_OS_schedule
   49 00000034         SVC_tableEnd
   50 00000034         
   51 00000034                 ALIGN
   52 00000034         PendSV_Handler
   53 00000034 B510            STMFD            sp!, {r4, lr} ; r4 included for
                                                             stack alignment
   54 00000036 4813            LDR              r0, =_OS_scheduler
   55 00000038 4780            BLX              r0



ARM Macro Assembler    Page 2 


   56 0000003A E8BD 4010       LDMFD            sp!, {r4, lr}
   57 0000003E         _task_switch
   58 0000003E         ; r0 contains nextTCB (OS_TCB *)
   59 0000003E         ; Load r2 = &_currentTCB (OS_TCB **), r1 = _currentTCB (
                       OS_TCB *, == OS_StackFrame **)
   60 0000003E 4A12            LDR              r2, =_currentTCB
   61 00000040 6811            LDR              r1, [r2]
   62 00000042         ; Compare _currentTCB to nextTCB: if equal, go home
   63 00000042 4281            CMP              r1, r0
   64 00000044 BF08 4770       BXEQ             lr
   65 00000048         ; If not, stack remaining process registers (pc, PSR, lr
                       , r0-r3, r12 already stacked)
   66 00000048 F3EF 8309       MRS              r3, PSP
   67 0000004C E923 0FF0       STMFD            r3!, {r4-r11}
   68 00000050         ; Store stack pointer
   69 00000050 600B            STR              r3, [r1]
   70 00000052         ; Load new stack pointer
   71 00000052 6803            LDR              r3, [r0]
   72 00000054         ; Unstack process registers
   73 00000054 E8B3 0FF0       LDMFD            r3!, {r4-r11}
   74 00000058 F383 8809       MSR              PSP, r3
   75 0000005C         ; Update _currentTCB
   76 0000005C 6010            STR              r0, [r2]
   77 0000005E         ; Clear exclusive access flag
   78 0000005E F3BF 8F2F       CLREX
   79 00000062 4770            BX               lr
   80 00000064         
   81 00000064                 ALIGN
   82 00000064         _task_init_switch
   83 00000064         ; Assume thread mode on entry
   84 00000064         ; Initial task is the idle task
   85 00000064         ; On entry r0 = OS_idleTCB_p (OS_TCB *)
   86 00000064         ; Load r1 = *(r0) (OS_StackFrame *)
   87 00000064 6801            LDR              r1, [r0]
   88 00000066         ; Update PSP
   89 00000066 F381 8809       MSR              PSP, r1
   90 0000006A         ; Update _currentTCB
   91 0000006A 4A07            LDR              r2, =_currentTCB
   92 0000006C 6010            STR              r0, [r2]
   93 0000006E         ; Switch to using PSP instead of MSP for thread mode (bi
                       t 1 = 1)
   94 0000006E         ; Also lose privileges in thread mode (bit 0 = 1) and di
                       sable FPU (bit 2 = 0)
   95 0000006E F04F 0203       MOV              r2, #3
   96 00000072 F382 8814       MSR              CONTROL, r2
   97 00000076         ; Instruction barrier (stack pointer switch)
   98 00000076 F3BF 8F6F       ISB
   99 0000007A         ; Check to see if the scheduler is preemptive before
  100 0000007A         ; This SVC call should be handled by _svc_OS_enable_syst
                       ick()
  101 0000007A DF00            SVC              0x00
  102 0000007C         ; Continue to the idle task
  103 0000007C         
  104 0000007C                 ALIGN
  105 0000007C         ; This SVC call should be handled by _svc_OS_schedule()
  106 0000007C         ; It causes a switch to a runnable task, if possible
  107 0000007C DF04            SVC              0x04
  108 0000007E         _idle_task
  109 0000007E         ; The following line is commented out because it doesn't



ARM Macro Assembler    Page 3 


                        play nicely with the debugger.
  110 0000007E         ; For deployment, uncomment this line and the CPU will s
                       leep when idling, waking only to
  111 0000007E         ; handle interrupts.
  112 0000007E         ;   WFI
  113 0000007E E7FE            B                _idle_task
  114 00000080         
  115 00000080                 ALIGN
  116 00000080                 END
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\flash\os_asm.d -o.\flash\os_asm.o -I.\RTE\_STM32F407_Flash -I
C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Ke
il\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="
__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA
 1" --predefine="STM32F407xx SETA 1" --list=.\flash\os_asm.lst OS\os_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

OS_func 00000000

Symbol: OS_func
   Definitions
      At line 2 in file OS\os_asm.s
   Uses
      None
Comment: OS_func unused
PendSV_Handler 00000034

Symbol: PendSV_Handler
   Definitions
      At line 52 in file OS\os_asm.s
   Uses
      At line 6 in file OS\os_asm.s
Comment: PendSV_Handler used once
SVC_Handler 00000000

Symbol: SVC_Handler
   Definitions
      At line 21 in file OS\os_asm.s
   Uses
      At line 5 in file OS\os_asm.s
Comment: SVC_Handler used once
SVC_tableEnd 00000034

Symbol: SVC_tableEnd
   Definitions
      At line 49 in file OS\os_asm.s
   Uses
      At line 34 in file OS\os_asm.s
Comment: SVC_tableEnd used once
SVC_tableStart 00000020

Symbol: SVC_tableStart
   Definitions
      At line 43 in file OS\os_asm.s
   Uses
      At line 34 in file OS\os_asm.s
      At line 39 in file OS\os_asm.s

_idle_task 0000007E

Symbol: _idle_task
   Definitions
      At line 108 in file OS\os_asm.s
   Uses
      At line 113 in file OS\os_asm.s
Comment: _idle_task used once
_task_init_switch 00000064

Symbol: _task_init_switch
   Definitions
      At line 82 in file OS\os_asm.s
   Uses
      At line 8 in file OS\os_asm.s
Comment: _task_init_switch used once
_task_switch 0000003E




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: _task_switch
   Definitions
      At line 57 in file OS\os_asm.s
   Uses
      At line 7 in file OS\os_asm.s
Comment: _task_switch used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

_OS_scheduler 00000000

Symbol: _OS_scheduler
   Definitions
      At line 12 in file OS\os_asm.s
   Uses
      At line 54 in file OS\os_asm.s
Comment: _OS_scheduler used once
_currentTCB 00000000

Symbol: _currentTCB
   Definitions
      At line 11 in file OS\os_asm.s
   Uses
      At line 60 in file OS\os_asm.s
      At line 91 in file OS\os_asm.s

_svc_OS_addTask 00000000

Symbol: _svc_OS_addTask
   Definitions
      At line 16 in file OS\os_asm.s
   Uses
      At line 45 in file OS\os_asm.s
Comment: _svc_OS_addTask used once
_svc_OS_enable_systick 00000000

Symbol: _svc_OS_enable_systick
   Definitions
      At line 15 in file OS\os_asm.s
   Uses
      At line 44 in file OS\os_asm.s
Comment: _svc_OS_enable_systick used once
_svc_OS_schedule 00000000

Symbol: _svc_OS_schedule
   Definitions
      At line 19 in file OS\os_asm.s
   Uses
      At line 48 in file OS\os_asm.s
Comment: _svc_OS_schedule used once
_svc_OS_task_exit 00000000

Symbol: _svc_OS_task_exit
   Definitions
      At line 17 in file OS\os_asm.s
   Uses
      At line 46 in file OS\os_asm.s
Comment: _svc_OS_task_exit used once
_svc_OS_yield 00000000

Symbol: _svc_OS_yield
   Definitions
      At line 18 in file OS\os_asm.s
   Uses
      At line 47 in file OS\os_asm.s
Comment: _svc_OS_yield used once
7 symbols
352 symbols in table
